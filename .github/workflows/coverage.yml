name: Update test coverage

on:
  workflow_dispatch:
  push:
    branches: [ main ] 
    paths:
      - 'src/**.h'
      - 'src/**.cpp'
      - 'tests/unit_tests/**'
      - '.github/workflows/coverage.yml'

env:
  # Workflow-wide environment variables for the names of the three uploaded
  # artifacts at the end of the 'build' job.
  HTML-ARTIFACT:  html-artifact
  BADGE-ARTIFACT: badge-artifact

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'

      - name: Install mpich
        run: |
          sudo apt update
          sudo apt install -y mpich

      - name: Change default g++ version
        # Set the default g++ and gcov versions to be 10 to avoid a mismatch
        # between the g++ version that the code is built with and the gcov
        # version that gcovr uses.
        run: |
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 10 \
            --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 20 \
            --slave /usr/bin/gcov gcov /usr/bin/gcov-10
          sudo update-alternatives --set c++ /usr/bin/g++
          g++ --version
          gcov --version

      - name: Configure CMake
        # Key thing here is the "--coverage" CXX flag, which generates the 
        # .gcno files required by gcov. It bundles together '-fprofile-arcs 
        # -ftest-coverage' (when compiling) with '-lgcov' (when linking).
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_CXX_FLAGS="-O0 --coverage"
          -DBUILD_TESTS=ON
          -DBUILD_FORTRAN_TESTS=OFF
          -DINCLUDE_GTEST=ON
          -DWARNINGS_AS_ERRORS=ON
          -DUSE_SANITIZERS=OFF
          -DENABLE_DOXYGEN=OFF 
          -DBUILD_SHARED_LIBS=ON

      - name: Build
        run: cmake --build ${{ github.workspace }}/build 

      - name: Run unit tests
        working-directory: ${{ github.workspace }}/build/
        run: ctest

      - name: Install and run gcovr
        # A conda virtual environment is activated in order to install and run
        # gcovr. Gcovr calls gcov and will generate a handful of .html files in
        # the "gcovr" directory that eventually get uploaded to GitHub pages.
        working-directory: ${{ github.workspace }}/build/
        env:
          ROOT_DIR: ${{ github.workspace }}
        run: |
          source $(conda info --base)/etc/profile.d/conda.sh
          conda create -q -y -n gcovr-env gcovr -c conda-forge --override-channels
          conda activate gcovr-env
          conda clean --all -y
          mkdir gcovr
          gcovr --root "${ROOT_DIR}/" \
            --filter "${ROOT_DIR}/src/c++" \
            --html --html-details -o gcovr/index.html --print-summary \
            "${ROOT_DIR}/build/src/c++/CMakeFiles/profiler.dir/" \
            > ./brief-summary.txt
          conda deactivate

      - name: Tar the html directory
        working-directory: ${{ github.workspace }}/build/
        run: tar czvf gcovr-html.tar.gz ./gcovr/*

      - name: Upload html artifact
        # Required for updating the gh-pages documentation.
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.HTML-ARTIFACT }}
          path: ${{ github.workspace }}/build/gcovr-html.tar.gz
          retention-days: 1
          if-no-files-found: error

      - name: Upload brief-summary.txt artifact
        # Required for updating the coverage badge at the top of the README.
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BADGE-ARTIFACT }}
          path: ${{ github.workspace }}/build/brief-summary.txt
          retention-days: 1
          if-no-files-found: error

  gh-pages:
    name: Update documentation
    needs: [ build ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.HTML-ARTIFACT }}

      - name: Unzip
        run: |
          mkdir build
          cd build/
          tar xzvf ../gcovr-html.tar.gz

      - name: Push to pages branch
        run: |
          mkdir -p ${{ github.workspace }}/docs/coverage
          cp -rf ${{ github.workspace }}/build/gcovr/* ${{ github.workspace }}/docs/coverage/.
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]'
          git remote update
          git add --force docs/coverage
          git stash
          git checkout gh-pages
          git rm -r --ignore-unmatch docs/coverage/
          rm -rf docs/coverage/
          git stash pop
          git reset
          git add --force docs/coverage
          git commit --allow-empty -m "Update unit test coverage"
          git push

  README:
    name: Update README badge
    needs: [ build ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BADGE-ARTIFACT }}

      - name: Determine overall line coverage
        # Line coverage percentage is grabbed from the downloaded txt file and
        # put into an environment variable.
        env:
          # Criterion for high and medium level line coverage, these values
          # determine the colour of the README coverage badge.
          HIGH: 90
          MEDIUM: 75
        run: |
          PERCENT=$(grep -oP "lines: \K(\d+(\.\d+)?(?=%))" brief-summary.txt)
          if (( $(echo "$PERCENT >= $HIGH" |bc -l) )); then
            COLOUR="success"
          elif (( $(echo "$PERCENT < $HIGH" |bc -l) && $(echo "$PERCENT >= $MEDIUM" |bc -l) )); then
            COLOUR="yellow"
          else 
            COLOUR="red"
          fi
          echo $PERCENT $COLOUR
          echo "PERCENT=$PERCENT" >> $GITHUB_ENV
          echo "COLOUR=$COLOUR" >> $GITHUB_ENV

      - name: Update coverage badge in README
        env:
          WORKFLOW_URL: https://github.com/MetOffice/profiler/actions/workflows/coverage.yml
          BADGE_URL: '[![Coverage](https://img.shields.io/badge/coverage-${{ env.PERCENT }}%25-${{ env.COLOUR }})](${WORKFLOW_URL})'
        run: |
          git reset
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]'
          sed -i '5s#.*#${{ env.BADGE_URL }}#' ${{ github.workspace }}/README.md
          git add --force ./README.md
          git commit --allow-empty -m "Update README.md"
          git push --force
