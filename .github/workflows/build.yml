# ------------------------------------------------------------------------------
#  (c) Crown copyright 2023 Met Office. All rights reserved.
#  The file LICENCE, distributed with this code, contains details of the terms
#  under which the code may be used.
# ------------------------------------------------------------------------------
name: Build and Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  # Turn of ODR violations in the Address Sanitizer. This is a workaround for a known issue with the Address Sanitizer and C++17.
  ASAN_OPTIONS: detect_odr_violation=0

jobs:
  build:
    # The CMake configure and build commands are platform-agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        mpi_enabled: [ON, OFF]
        compiler: [
          {c: gcc-12, cpp: g++-12, fortran: gfortran-12},
          {c: gcc-13, cpp: g++-13, fortran: gfortran-13},
          {c: gcc-14, cpp: g++-14, fortran: gfortran-14},
          {c: clang-18, cpp: clang++-18, fortran: gfortran-12}
        ]
    name: Compiler ${{ matrix.compiler.cpp }} with MPI ${{matrix.mpi_enabled}}

    steps:
    - uses: actions/checkout@v3

    - name: Install libomp-devel and mpich
      # Ensure that the OpenMP development libraries are installed.
      run: |
        sudo apt update
        sudo apt install -y libomp-18-dev
        sudo apt install -y mpich

    - name: Check versions
      # Print the version number of installed libraries
      run: |
        gcc --version
        $ echo |cpp -fopenmp -dM |grep -i open
        mpichversion

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_C_COMPILER=${{ matrix.compiler.c }}
        -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cpp }}
        -DCMAKE_Fortran_COMPILER=${{ matrix.compiler.fortran }}
        -DBUILD_TESTS=ON
        -DBUILD_FORTRAN_TESTS=OFF
        -DINCLUDE_GTEST=ON
        -DWARNINGS_AS_ERRORS=ON
        -DUSE_SANITIZERS=ON
        -DENABLE_DOXYGEN=OFF
        -DBUILD_DOCS=OFF
        -DENABLE_MPI=${{ matrix.mpi_enabled }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # Run tests on a single thread
    - name: "Test (1 thread)"
      env:
        OMP_NUM_THREADS: 1
      working-directory: ${{github.workspace}}/build
      run: ctest -VV -C ${{env.BUILD_TYPE}}

    # Run tests on 4 threads
    - name: "Test (4 threads)"
      env:
        OMP_NUM_THREADS: 4
      working-directory: ${{github.workspace}}/build
      run: ctest -VV -C ${{env.BUILD_TYPE}}

