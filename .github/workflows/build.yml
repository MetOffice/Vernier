name: Build and install

on:
  workflow_call:
    inputs:
      # Inputs are provided that allow various CMake options to be changed.
      c_compiler:
        description:
          'Provide a C compiler to use for the DCMAKE_C_COMPILER CMake option.'
        required: true
        type: string
      cpp_compiler:
        description:
          'Provide a C++ compiler to use for the DCMAKE_CXX_COMPILER CMake option.'
        required: true
        type: string
      fortran_compiler:
        description:
          'Provide a Fortran compiler to use for the DCMAKE_Fortran_COMPILER CMake option.'
        required: true
        type: string
      shared_libs:
        description:
          'Determines the DBUILD_SHARED_LIBS option.'
        required: true
        type: boolean

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    name: "${{ inputs.shared_libs && 'dynamic' || 'static' }}"
    # The CMake configure and build commands are platform agnostic and should 
    # work equally well on Windows or Mac. You can convert this to a matrix 
    # build if you need cross-platform coverage. See:
    # https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Install libomp-devel and mpich
      # Ensure that the OpenMP development libraries are installed.
      run: |
        sudo apt update
        sudo apt install -y libomp-12-dev
        sudo apt install -y mpich

    - name: Setup
      # The name of the build directory and uploaded artifact varies depending
      # on whether static or dynamic linking is being done.
      run: |
        if [[ ${{ inputs.shared_libs }} ]]
        then
          LINKING=dynamic
        else
          LINKING=static
        fi
        COMPILER=${{ inputs.cpp_compiler }}
        echo "BUILD_NAME=${COMPILER:0:-3}_${LINKING}_build" >> $GITHUB_ENV
        echo "INSTALL_NAME=${COMPILER:0:-3}_${LINKING}_install" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only
      # required if you are using a single-configuration generator such as 
      # make. See:
      # https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/${{ env.BUILD_NAME }}
        -DCMAKE_INSTALL_PREFIX="/home/runner/work/${{ env.INSTALL_NAME }}"
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} 
        -DCMAKE_C_COMPILER=${{ inputs.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ inputs.cpp_compiler }}
        -DCMAKE_Fortran_COMPILER=${{ inputs.fortran_compiler }}
        -DBUILD_TESTS=ON
        -DBUILD_FORTRAN_TESTS=OFF
        -DINCLUDE_GTEST=ON
        -DWARNINGS_AS_ERRORS=ON 
        -DUSE_SANITIZERS=OFF
        -DENABLE_DOXYGEN=OFF 
        -DBUILD_SHARED_LIBS=${{ inputs.shared_libs }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{ github.workspace }}/${{ env.BUILD_NAME }} --config ${{ env.BUILD_TYPE }}

    - name: Perform installation
      # Install the public headers and profiler libraries.
      run: cmake --install ${{ github.workspace }}/${{ env.BUILD_NAME }} --config ${{ env.BUILD_TYPE }}
    
    - name: Tar build & install files
      # Massively speeds up the subsequent artifact uploads.
      run: |
        tar czvf ${{ env.BUILD_NAME }}.tar.gz   ${{ github.workspace }}/${{ env.BUILD_NAME }}/*
        tar czvf ${{ env.INSTALL_NAME }}.tar.gz /home/runner/work/${{ env.INSTALL_NAME }}/*

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BUILD_NAME }}
        path: ${{ env.BUILD_NAME }}.tar.gz
        retention-days: 1
        if-no-files-found: error

    - name: Upload install artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.INSTALL_NAME }}
        path: ${{ env.INSTALL_NAME }}.tar.gz
        retention-days: 1
        if-no-files-found: error
