!-------------------------------------------------------------------------------
! (c) Crown copyright 2024 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-------------------------------------------------------------------------------
module test_vernier_mod
  @suite(name='test_vernier_mod_suite')

  use vernier_mod
  !$ use omp_lib
  use mpi
  use pfunit

  integer, parameter :: dp = 8

  @TestCase
  type, extends(MPITestCase), public :: test_vernier_type
    private
  contains
    procedure :: setup
    procedure :: teardown
    procedure :: test_vernier_timings
  end type test_vernier_type

contains

  !-----------------------------------------------------------------------------
  ! Setup routine
  !-----------------------------------------------------------------------------

  subroutine setup(this)
    implicit none
    
    class(test_vernier_type), intent(inout) :: this

  end subroutine setup

  !-----------------------------------------------------------------------------
  ! Teardown routine
  !-----------------------------------------------------------------------------

  subroutine teardown(this)
    implicit none
    
    class(test_vernier_type), intent(inout) :: this

  end subroutine teardown

  !-----------------------------------------------------------------------------
  ! Test Vernier timings
  !-----------------------------------------------------------------------------

  @test(npes=[1,2])
  subroutine test_vernier_timings(this)
    implicit none

    class(test_vernier_type), intent(inout) :: this

    ! Timer declarations
    real(kind=dp) :: t1, t2, actual_time

    ! Handle declarations
    integer(kind=vik) :: prof_main

    ! Error handler
    integer :: ierr

    ! Initialise Vernier
    call vernier_init(this%getMpiCommunicator())

    ! Start timing: noddy way, and using Profiler.
    call vernier_start(prof_main, 'FULL')
    t1 = vernier_get_wtime()

    ! Time a region
    block
      integer(kind=vik) :: prof_sub
      call vernier_start(prof_sub, 'MAIN_SUB')
      call sleep(1);
      call vernier_stop(prof_sub)
    end block

    ! Time nested regions on many threads.
    !$OMP PARALLEL
    block
      integer(kind=vik) :: prof_sub
      integer(kind=vik) :: prof_sub2
      call vernier_start(prof_sub, "MAIN_SUB")
      call sleep(1);

      ! Time nested region
      call vernier_start(prof_sub2, "MAIN_SUB2")
      call sleep(1);
      call vernier_stop(prof_sub2)

      ! Outer region end.
      call vernier_stop(prof_sub)
    end block
    !$OMP END PARALLEL

    ! Give the main regions some substantial execution time.
    call sleep(2);

    ! End of profiling; record t2 immediately before.
    t2 = vernier_get_wtime()
    call vernier_stop(prof_main)

    assertions: block
      real(kind=vrk) :: profiler_wallclock_time

      actual_time = t2 - t1
      profiler_wallclock_time = vernier_get_total_walltime(prof_main, 0_vik)

      @assertEqual(actual_time, profiler_wallclock_time, tolerance=1.0e-4_dp)
    end block assertions

    ! Write profile and finalize.
    call vernier_write()

    call vernier_finalize()

  end subroutine test_vernier_timings

end module test_vernier_mod
