!-------------------------------------------------------------------------------
! (c) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-------------------------------------------------------------------------------
module test_vernier_mod
  @suite(name='test_vernier_mod_suite')

  use vernier_mod
  use omp_lib
  use mpi_f08

contains

  @test
  subroutine test_vernier()

    use pFUnit

    implicit none

    integer, parameter :: dp = 8

    ! Timer declarations
    real(kind=dp) :: t1, t2, actual_time

    ! Handle declarations
    integer(kind=vik) :: prof_main

    ! Error handler
    integer :: ierr

    ! Initialise MPI
    call mpi_init(ierr)

    ! Start timing: noddy way, and using Profiler.
    call vernier_start(prof_main, 'FULL')
    t1 = omp_get_wtime()

    ! Time a region
    block
      integer(kind=vik) :: prof_sub
      call vernier_start(prof_sub, 'MAIN_SUB')
      call sleep(1);
      call vernier_stop(prof_sub)
    end block

    ! Time nested regions on many threads.
    !$OMP PARALLEL
    block
      integer(kind=vik) :: prof_sub
      integer(kind=vik) :: prof_sub2
      call vernier_start(prof_sub, "MAIN_SUB")
      call sleep(1);

      ! Time nested region
      call vernier_start(prof_sub2, "MAIN_SUB2")
      call sleep(1);
      call vernier_stop(prof_sub2)

      ! Outer region end.
      call vernier_stop(prof_sub)
    end block
    !$OMP END PARALLEL

    ! Give the main regions some substantial execution time.
    call sleep(2);

    ! End of profiling; record t2 immediately before.
    t2 = omp_get_wtime();
    call vernier_stop(prof_main)

    assertions: block
      real(kind=vrk) :: profiler_wallclock_time

      actual_time = t2 - t1
      profiler_wallclock_time = vernier_get_total_walltime(prof_main, 0_vik)

      @assertEqual(actual_time, profiler_wallclock_time, tolerance=1.0e-4_dp)
    end block assertions

    call vernier_write()

    call mpi_finalize(ierr)

  end subroutine test_vernier

end module test_vernier_mod
