!-------------------------------------------------------------------------------
! (c) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-------------------------------------------------------------------------------
module test_profiler_mod
  @suite(name='test_profiler_mod_suite')

  use profiler_mod
  use omp_lib

contains

  @test
  subroutine test_profiler()

    use pFUnit

    implicit none

    integer, parameter :: dp = 8

    ! Timer declarations
    real(kind=dp) :: t1, t2, actual_time

    real(kind=prk) :: profiler_wallclock_time

    ! Handle declarations
    integer(kind=pik) :: prof_main

    ! Start timing: noddy way, and using Profiler.
    call profiler_start(prof_main, 'FULL')
    t1 = omp_get_wtime()

    ! Time a region
    block
      integer(kind=pik) :: prof_sub
      call profiler_start(prof_sub, 'MAIN_SUB')
      call sleep(1);
      call profiler_stop(prof_sub)
    end block

    ! Time nested regions on many threads.
    !$OMP PARALLEL
    block
      integer(kind=pik) :: prof_sub
      integer(kind=pik) :: prof_sub2
      call profiler_start(prof_sub, "MAIN_SUB")
      call sleep(1);

      ! Time nested region
      call profiler_start(prof_sub2, "MAIN_SUB2")
      call sleep(1);
      call profiler_stop(prof_sub2)

      ! Outer region end.
      call profiler_stop(prof_sub)
    end block
    !$OMP END PARALLEL

    ! Give the main regions some substantial execution time.
    call sleep(2);

    ! End of profiling; record t2 immediately before.
    t2 = omp_get_wtime();
    call profiler_stop(prof_main)

    ! Write the profile
    call profiler_write()

    actual_time = t2 - t1
    profiler_wallclock_time = profiler_get_thread0_walltime(prof_main)

    @assertEqual(actual_time, profiler_wallclock_time, tolerance=1.0e-4_dp)

  end subroutine test_profiler

end module test_profiler_mod
